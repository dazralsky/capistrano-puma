namespace :deploy do
  after :finished, 'puma:restart'
end

namespace :load do
  task :defaults do
    set :puma_role, :app
    set :puma_env, fetch(:rack_env, fetch(:rails_env, 'production'))

    # Configure "min" to be the minimum number of threads to use to answer
    # requests and "max" the maximum.
    set :puma_threads, [0, 16]
    set :puma_workers, 0
    set :rbenv_map_bins, %w{ puma pumactl }
  end
end

namespace :puma do
  desc 'Setup Puma config file'
  task :config do
    on roles(fetch(:puma_role)) do
      template 'puma.rb.erb', fetch(:puma_conf)
    end
  end


  desc 'Start puma'
  task :start do
    on roles (fetch(:puma_role)) do
      within current_path do
        execute :puma, "-C #{fetch(:puma_conf)}"
      end
    end
  end

  %w[halt stop restart phased-restart status].each do |command|
    desc "#{command} puma"
    task command do
      on roles (fetch(:puma_role)) do
        within current_path do
          execute :pumactl, "-S #{fetch(:puma_state)} #{command}"
        end
      end
    end
  end

end

def template(from, to)
  erb = File.read(File.expand_path("../../templates/#{from}", __FILE__))
  upload! StringIO.new(ERB.new(erb).result(binding)), to
end